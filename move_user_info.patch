diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/embeddable/AdditionalInfo.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/embeddable/AdditionalInfo.java
index 4cae380..464d175 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/embeddable/AdditionalInfo.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/embeddable/AdditionalInfo.java
@@ -2,7 +2,7 @@ package com.angio.angiobackend.api.analyse.embeddable;
 
 import com.angio.angiobackend.api.analyse.type.AnalyseType;
 import com.angio.angiobackend.api.patient.entity.PatientEntity;
-import com.angio.angiobackend.api.security.entity.User;
+import com.angio.angiobackend.api.user.entities.User;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/DensityEntity.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/DensityEntity.java
index 2f8ee0d..b4226d3 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/DensityEntity.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/DensityEntity.java
@@ -7,6 +7,7 @@ import lombok.NoArgsConstructor;
 import lombok.ToString;
 import lombok.experimental.Accessors;
 
+import javax.persistence.Cacheable;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
@@ -23,6 +24,7 @@ import javax.persistence.Table;
 @NoArgsConstructor
 @ToString(exclude = {"analyse"})
 @EqualsAndHashCode(exclude = {"id", "analyse"})
+@Cacheable
 @Entity
 @Table(name = "densities", schema = "public")
 public class DensityEntity {
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/IshemiaEntity.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/IshemiaEntity.java
index d480d62..25d27ef 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/IshemiaEntity.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/IshemiaEntity.java
@@ -7,6 +7,7 @@ import lombok.NoArgsConstructor;
 import lombok.ToString;
 import lombok.experimental.Accessors;
 
+import javax.persistence.Cacheable;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
@@ -23,6 +24,7 @@ import javax.persistence.Table;
 @NoArgsConstructor
 @ToString(exclude = {"analyse"})
 @EqualsAndHashCode(exclude = {"id", "analyse"})
+@Cacheable
 @Entity
 @Table(name = "ischemias", schema = "public")
 public class IshemiaEntity {
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/VesselEntity.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/VesselEntity.java
index 7aaa315..a07e5e3 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/VesselEntity.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/entity/VesselEntity.java
@@ -8,6 +8,7 @@ import lombok.NoArgsConstructor;
 import lombok.ToString;
 import lombok.experimental.Accessors;
 
+import javax.persistence.Cacheable;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
@@ -25,6 +26,7 @@ import javax.persistence.Table;
 @NoArgsConstructor
 @ToString(exclude = {"vesselImage", "mainVesselImage", "analyse"})
 @EqualsAndHashCode(exclude = {"id", "vesselImage", "mainVesselImage", "analyse"})
+@Cacheable
 @Entity
 @Table(name = "vessels")
 public class VesselEntity {
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AdditionalInfoMapper.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AdditionalInfoMapper.java
index e8dacb6..ff831fb 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AdditionalInfoMapper.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AdditionalInfoMapper.java
@@ -4,7 +4,7 @@ import com.angio.angiobackend.api.analyse.dto.AdditionalInfoDto;
 import com.angio.angiobackend.api.analyse.embeddable.AdditionalInfo;
 import com.angio.angiobackend.api.common.mapper.AbstractMapper;
 import com.angio.angiobackend.api.patient.mapper.PatientMapper;
-import com.angio.angiobackend.api.user.mapstruct.UserInfoMapper;
+import com.angio.angiobackend.api.user.mapper.UserMapper;
 import org.mapstruct.BeanMapping;
 import org.mapstruct.Mapper;
 import org.mapstruct.Mapping;
@@ -15,7 +15,7 @@ import org.mapstruct.NullValuePropertyMappingStrategy;
 @Mapper(
         uses = {
                 PatientMapper.class,
-                UserInfoMapper.class
+                UserMapper.class
         })
 public interface AdditionalInfoMapper extends AbstractMapper<AdditionalInfo, AdditionalInfoDto> {
 
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AnalyseMapper.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AnalyseMapper.java
index 08d999d..c26ae17 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AnalyseMapper.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/mapper/AnalyseMapper.java
@@ -6,7 +6,7 @@ import com.angio.angiobackend.api.analyse.dto.DetailedAnalyseDto;
 import com.angio.angiobackend.api.analyse.entity.AnalyseEntity;
 import com.angio.angiobackend.api.patient.mapper.PatientMapper;
 import com.angio.angiobackend.api.uploads.mapper.UploadMapper;
-import com.angio.angiobackend.api.user.mapstruct.UserInfoMapper;
+import com.angio.angiobackend.api.user.mapper.UserMapper;
 import org.mapstruct.CollectionMappingStrategy;
 import org.mapstruct.Mapper;
 import org.mapstruct.Mapping;
@@ -20,7 +20,7 @@ import org.mapstruct.ReportingPolicy;
         uses = {
                 PatientMapper.class,
                 UploadMapper.class,
-                UserInfoMapper.class,
+                UserMapper.class,
                 AnalyseStatusMapper.class,
                 AdditionalInfoMapper.class,
                 GeometricAnalyseMapper.class,
@@ -46,6 +46,6 @@ public interface AnalyseMapper {
 
     AnalyseJmsDto toAnalyseDto(AnalyseEntity entity);
 
-    @Mapping(source = "additionalInfo.diagnostician.userInfo.fullName", target = "diagnostician")
+    @Mapping(source = "additionalInfo.diagnostician.fullName", target = "diagnostician")
     AnalyseShortItemDto toShortItemDto(AnalyseEntity entity);
 }
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/service/impl/AnalyseServiceImpl.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/service/impl/AnalyseServiceImpl.java
index ed35fa9..ef93a9a 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/service/impl/AnalyseServiceImpl.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/service/impl/AnalyseServiceImpl.java
@@ -17,7 +17,7 @@ import com.angio.angiobackend.api.analyse.type.AnalyseStatusType;
 import com.angio.angiobackend.api.common.accessor.DynamicLocaleMessageSourceAccessor;
 import com.angio.angiobackend.api.common.exception.ResourceNotFoundException;
 import com.angio.angiobackend.api.patient.service.PatientService;
-import com.angio.angiobackend.api.security.service.impl.UserDetailsServiceImpl;
+import com.angio.angiobackend.api.user.service.UserService;
 import com.angio.angiobackend.api.uploads.repository.UploadRepository;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
@@ -50,7 +50,7 @@ public class AnalyseServiceImpl implements AnalyseService {
     private final AnalyseRepository analyseRepository;
     private final UploadRepository uploadRepository;
     private final PatientService patientService;
-    private final UserDetailsServiceImpl userDetailsServiceImpl;
+    private final UserService userService;
     private final AnalyseToExecuteSender analyseToExecuteSender;
     private final DynamicLocaleMessageSourceAccessor msa;
 
@@ -78,7 +78,7 @@ public class AnalyseServiceImpl implements AnalyseService {
         entity.getAdditionalInfo().setPatient(patientService.getPatientEntityById(dto.getAdditionalInfo().getPatientId()));
 
         log.trace("createAnalyse() - save diagnostician data");
-        entity.getAdditionalInfo().setDiagnostician(userDetailsServiceImpl.getUserFromContext());
+        entity.getAdditionalInfo().setDiagnostician(userService.getUserFromContext());
 
         log.trace("createAnalyse() - set analyse date");
         entity.setAnalyseDate(new Date());
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/specification/AnalyseSpecification.java b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/specification/AnalyseSpecification.java
index 2ad08b6..a4cfec8 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/specification/AnalyseSpecification.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/analyse/specification/AnalyseSpecification.java
@@ -14,8 +14,7 @@ import com.angio.angiobackend.api.analyse.type.AnalyseStatusType;
 import com.angio.angiobackend.api.analyse.type.AnalyseType;
 import com.angio.angiobackend.api.common.embeddable.FullName_;
 import com.angio.angiobackend.api.patient.entity.PatientEntity_;
-import com.angio.angiobackend.api.security.entity.User_;
-import com.angio.angiobackend.api.user.entities.UserInfoEntity_;
+import com.angio.angiobackend.api.user.entities.User_;
 import com.angio.angiobackend.util.EnumUtils;
 import org.springframework.data.jpa.domain.Specification;
 import org.springframework.stereotype.Component;
@@ -124,8 +123,7 @@ public class AnalyseSpecification {
             if (firstname != null) {
                 return cb.like(root.get(AnalyseEntity_.additionalInfo)
                         .get(AdditionalInfo_.diagnostician)
-                        .get(User_.userInfo)
-                        .get(UserInfoEntity_.fullName)
+                        .get(User_.fullName)
                         .get(FullName_.firstname), substringPattern(firstname));
             }
             return null;
@@ -143,8 +141,7 @@ public class AnalyseSpecification {
             if (lastname != null) {
                 return cb.like(root.get(AnalyseEntity_.additionalInfo)
                         .get(AdditionalInfo_.diagnostician)
-                        .get(User_.userInfo)
-                        .get(UserInfoEntity_.fullName)
+                        .get(User_.fullName)
                         .get(FullName_.lastname), substringPattern(lastname));
             }
             return null;
@@ -162,8 +159,7 @@ public class AnalyseSpecification {
             if (patronymic != null) {
                 return cb.like(root.get(AnalyseEntity_.additionalInfo)
                         .get(AdditionalInfo_.diagnostician)
-                        .get(User_.userInfo)
-                        .get(UserInfoEntity_.fullName)
+                        .get(User_.fullName)
                         .get(FullName_.patronymic), substringPattern(patronymic));
             }
             return null;
@@ -294,20 +290,6 @@ public class AnalyseSpecification {
     }
 
     /**
-     * Fetch additional info.
-     *
-     * @return specification
-     */
-    public Specification<AnalyseEntity> fetchAdditionalInfo() {
-        return (root, query, cb) -> {
-            Fetch<AnalyseEntity, AdditionalInfo> entityFetch = root.fetch(AnalyseEntity_.additionalInfo, LEFT);
-            entityFetch.fetch(AdditionalInfo_.patient, LEFT);
-            entityFetch.fetch(AdditionalInfo_.diagnostician, LEFT).fetch(User_.userInfo, LEFT);
-            return cb.conjunction();
-        };
-    }
-
-    /**
      * Fetch blood flow analyse.
      *
      * @return specification
@@ -346,7 +328,6 @@ public class AnalyseSpecification {
      */
     public Specification<AnalyseEntity> fetchAll() {
         return fetchOriginalImage()
-                .and(fetchAdditionalInfo())
                 .and(fetchGeometricAnalyse())
                 .and(fetchBloodFlowAnalyse());
     }
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/JwtJdbcTokenStore.java b/angio-backend/src/main/java/com/angio/angiobackend/api/security/JwtJdbcTokenStore.java
index 2319406..694118f 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/JwtJdbcTokenStore.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/security/JwtJdbcTokenStore.java
@@ -1,9 +1,9 @@
 package com.angio.angiobackend.api.security;
 
 import com.angio.angiobackend.api.security.entity.Token;
-import com.angio.angiobackend.api.security.entity.User;
+import com.angio.angiobackend.api.user.entities.User;
 import com.angio.angiobackend.api.security.repository.TokenRepository;
-import com.angio.angiobackend.api.security.service.UserService;
+import com.angio.angiobackend.api.user.service.UserService;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.json.JsonParser;
 import org.springframework.boot.json.JsonParserFactory;
@@ -37,7 +37,7 @@ public class JwtJdbcTokenStore extends JwtTokenStore {
         Map<String, ?> tokenData = getJwtClaims(refreshToken.getValue());
 
         log.debug("storeRefreshToken() - find user email={} in db", authentication.getName());
-        User user = userService.findUserEntityByEmail(authentication.getName());
+        User user = userService.findUserEntityById(Long.valueOf(authentication.getName()));
 
         Token token = new Token()
                 .setUser(user)
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Role.java b/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Role.java
index 9aa07f2..3d98076 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Role.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Role.java
@@ -1,5 +1,6 @@
 package com.angio.angiobackend.api.security.entity;
 
+import com.angio.angiobackend.api.user.entities.User;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Token.java b/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Token.java
index 27bbdfd..0440bf7 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Token.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/Token.java
@@ -1,5 +1,6 @@
 package com.angio.angiobackend.api.security.entity;
 
+import com.angio.angiobackend.api.user.entities.User;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/UserService.java b/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/UserService.java
deleted file mode 100644
index f9ddccc..0000000
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/UserService.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.angio.angiobackend.api.security.service;
-
-import com.angio.angiobackend.api.security.entity.User;
-import lombok.NonNull;
-import org.springframework.stereotype.Repository;
-import org.springframework.transaction.annotation.Transactional;
-
-@Repository
-public interface UserService {
-
-    @Transactional
-    User findUserEntityByEmail(@NonNull String email);
-}
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/SecurityServiceImpl.java b/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/SecurityServiceImpl.java
index e8ae1d9..a27b727 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/SecurityServiceImpl.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/SecurityServiceImpl.java
@@ -3,7 +3,7 @@ package com.angio.angiobackend.api.security.service.impl;
 import com.angio.angiobackend.api.common.accessor.DynamicLocaleMessageSourceAccessor;
 import com.angio.angiobackend.api.security.JwtJdbcTokenStore;
 import com.angio.angiobackend.api.security.entity.Token;
-import com.angio.angiobackend.api.security.entity.User;
+import com.angio.angiobackend.api.user.entities.User;
 import com.angio.angiobackend.api.security.service.SecurityService;
 import lombok.AllArgsConstructor;
 import lombok.NonNull;
@@ -27,7 +27,7 @@ public class SecurityServiceImpl implements SecurityService {
 
     @Override
     @Transactional
-    @PreAuthorize("hasRole('TOKEN_REVOKE')")
+    @PreAuthorize("hasAuthority('TOKEN_REVOKE')")
     public String revoke(@NonNull String tokenId) {
 
         log.debug("revoke() - start jti: {}", tokenId);
@@ -38,7 +38,8 @@ public class SecurityServiceImpl implements SecurityService {
 
         Authentication revocationIssuer = SecurityContextHolder.getContext().getAuthentication();
 
-        if (Objects.equals(tokenIssuer.getEmail(), revocationIssuer.getName())) {
+        log.info("{} - {}", tokenIssuer.getId(), Long.valueOf(revocationIssuer.getName()));
+        if (Objects.equals(tokenIssuer.getId(), Long.valueOf(revocationIssuer.getName()))) {
 
             log.debug("revoke() - do revoke");
             tokenStore.removeRefreshTokenById(tokenId);
@@ -50,7 +51,7 @@ public class SecurityServiceImpl implements SecurityService {
 
     @Override
     @Transactional
-    @PreAuthorize("hasRole('TOKEN_REMOVE')")
+    @PreAuthorize("hasAuthority('TOKEN_REMOVE')")
     public String removeToken(@NonNull String tokenId) {
 
         log.debug("remove() - start jti: {}", tokenId);
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/uploads/entity/StaticFileEntity.java b/angio-backend/src/main/java/com/angio/angiobackend/api/uploads/entity/StaticFileEntity.java
index 75ac0e8..10682ba 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/uploads/entity/StaticFileEntity.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/uploads/entity/StaticFileEntity.java
@@ -5,6 +5,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.persistence.Cacheable;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
@@ -15,6 +16,7 @@ import javax.persistence.Table;
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
+@Cacheable
 @Entity
 @Table(name = "uploads", schema = "public")
 public class StaticFileEntity {
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/User.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/entities/User.java
similarity index 77%
rename from angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/User.java
rename to angio-backend/src/main/java/com/angio/angiobackend/api/user/entities/User.java
index 03a024f..2ace7ee 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/entity/User.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/user/entities/User.java
@@ -1,17 +1,18 @@
-package com.angio.angiobackend.api.security.entity;
+package com.angio.angiobackend.api.user.entities;
 
 import com.angio.angiobackend.api.analyse.entity.AnalyseEntity;
-import com.angio.angiobackend.api.user.entities.UserInfoEntity;
+import com.angio.angiobackend.api.common.embeddable.FullName;
+import com.angio.angiobackend.api.security.entity.Role;
+import com.angio.angiobackend.api.security.entity.Token;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import lombok.ToString;
 import lombok.experimental.Accessors;
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.userdetails.UserDetails;
 
 import javax.persistence.Column;
+import javax.persistence.Embedded;
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.GeneratedValue;
@@ -23,15 +24,13 @@ import javax.persistence.ManyToMany;
 import javax.persistence.OneToMany;
 import javax.persistence.OneToOne;
 import javax.persistence.Table;
-import java.io.Serializable;
-import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
 
 @Data
 @Accessors(chain = true)
-@ToString(exclude = {"roles", "tokens", "analyses", "userInfo"})
-@EqualsAndHashCode(exclude = {"id", "roles", "tokens", "analyses", "userInfo"})
+@ToString(exclude = {"roles", "tokens", "analyses"})
+@EqualsAndHashCode(exclude = {"id", "roles", "tokens", "analyses"})
 @AllArgsConstructor
 @NoArgsConstructor
 @Entity
@@ -45,6 +44,9 @@ public class User {
     @Column(name = "email", unique = true, nullable = false)
     private String email;
 
+    @Embedded
+    private FullName fullName;
+
     @Column(name = "password", nullable = false)
     private String password;
 
@@ -72,8 +74,5 @@ public class User {
             mappedBy = "additionalInfo.diagnostician",
             orphanRemoval = true
     )
-    private Set<AnalyseEntity> analyses = new HashSet<>(0);
-
-    @OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
-    private UserInfoEntity userInfo;
+    private Set<AnalyseEntity> analyses = new HashSet<>();
 }
\ No newline at end of file
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/user/entities/UserInfoEntity.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/entities/UserInfoEntity.java
deleted file mode 100644
index a7d6f2b..0000000
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/user/entities/UserInfoEntity.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.angio.angiobackend.api.user.entities;
-
-import com.angio.angiobackend.api.common.embeddable.FullName;
-import com.angio.angiobackend.api.security.entity.User;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import javax.persistence.Column;
-import javax.persistence.Embedded;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.OneToOne;
-import javax.persistence.Table;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Entity
-@Table(name = "users_info", schema = "public")
-public class UserInfoEntity {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "info_id", nullable = false)
-    private long infoId;
-
-    @OneToOne(fetch = FetchType.LAZY)
-    @JoinColumn(name = "user_id", nullable = false)
-    private User user;
-
-    @Embedded
-    private FullName fullName;
-}
\ No newline at end of file
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapper/UserInfoMapper.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapper/UserInfoMapper.java
deleted file mode 100644
index ed6e79e..0000000
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapper/UserInfoMapper.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.angio.angiobackend.api.user.mapper;
-
-import com.angio.angiobackend.api.analyse.dto.DiagnosticianDto;
-import com.angio.angiobackend.api.user.entities.UserInfoEntity;
-import ma.glasnost.orika.MapperFactory;
-import ma.glasnost.orika.impl.ConfigurableMapper;
-import org.springframework.stereotype.Component;
-
-@Component
-public class UserInfoMapper extends ConfigurableMapper {
-
-    @Override
-    protected void configure(MapperFactory factory) {
-        factory.classMap(UserInfoEntity.class, DiagnosticianDto.class)
-                .byDefault()
-                .register();
-    }
-}
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapstruct/UserInfoMapper.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapper/UserMapper.java
similarity index 73%
rename from angio-backend/src/main/java/com/angio/angiobackend/api/user/mapstruct/UserInfoMapper.java
rename to angio-backend/src/main/java/com/angio/angiobackend/api/user/mapper/UserMapper.java
index 9c61f72..ec42deb 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapstruct/UserInfoMapper.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/user/mapper/UserMapper.java
@@ -1,8 +1,8 @@
-package com.angio.angiobackend.api.user.mapstruct;
+package com.angio.angiobackend.api.user.mapper;
 
 import com.angio.angiobackend.api.analyse.dto.DiagnosticianDto;
 import com.angio.angiobackend.api.common.mapper.FullNameMapper;
-import com.angio.angiobackend.api.security.entity.User;
+import com.angio.angiobackend.api.user.entities.User;
 import org.mapstruct.InheritInverseConfiguration;
 import org.mapstruct.Mapper;
 import org.mapstruct.Mapping;
@@ -13,9 +13,8 @@ import org.mapstruct.ReportingPolicy;
         uses = {
                 FullNameMapper.class
         })
-public interface UserInfoMapper {
+public interface UserMapper {
 
-    @Mapping(source = "userInfo.fullName", target = "fullName")
     DiagnosticianDto toDiagnostician(User entity);
 
     @InheritInverseConfiguration(name = "toDiagnostician")
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/user/repositories/UserInfoCrudRepository.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/repositories/UserInfoCrudRepository.java
deleted file mode 100644
index 34cf42d..0000000
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/user/repositories/UserInfoCrudRepository.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.angio.angiobackend.api.user.repositories;
-
-import com.angio.angiobackend.api.security.entity.User;
-import com.angio.angiobackend.api.user.entities.UserInfoEntity;
-import org.springframework.data.repository.CrudRepository;
-
-import java.util.List;
-
-public interface UserInfoCrudRepository extends CrudRepository<UserInfoEntity, Long>{
-}
\ No newline at end of file
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/repository/UserRepository.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/repositories/UserRepository.java
similarity index 70%
rename from angio-backend/src/main/java/com/angio/angiobackend/api/security/repository/UserRepository.java
rename to angio-backend/src/main/java/com/angio/angiobackend/api/user/repositories/UserRepository.java
index 6c1ed7b..0ab19c7 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/repository/UserRepository.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/user/repositories/UserRepository.java
@@ -1,6 +1,6 @@
-package com.angio.angiobackend.api.security.repository;
+package com.angio.angiobackend.api.user.repositories;
 
-import com.angio.angiobackend.api.security.entity.User;
+import com.angio.angiobackend.api.user.entities.User;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/UserService.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/UserService.java
new file mode 100644
index 0000000..072b2c3
--- /dev/null
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/UserService.java
@@ -0,0 +1,15 @@
+package com.angio.angiobackend.api.user.service;
+
+import com.angio.angiobackend.api.user.entities.User;
+import org.springframework.stereotype.Repository;
+import org.springframework.transaction.annotation.Transactional;
+
+@Repository
+public interface UserService {
+
+    @Transactional
+    User findUserEntityById(Long id);
+
+    @Transactional
+    User getUserFromContext();
+}
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/UserDetailsServiceImpl.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/impl/UserDetailsServiceImpl.java
similarity index 71%
rename from angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/UserDetailsServiceImpl.java
rename to angio-backend/src/main/java/com/angio/angiobackend/api/user/service/impl/UserDetailsServiceImpl.java
index f2b580c..3570f79 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/api/security/service/impl/UserDetailsServiceImpl.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/impl/UserDetailsServiceImpl.java
@@ -1,13 +1,12 @@
-package com.angio.angiobackend.api.security.service.impl;
+package com.angio.angiobackend.api.user.service.impl;
 
 import com.angio.angiobackend.api.common.accessor.DynamicLocaleMessageSourceAccessor;
 import com.angio.angiobackend.api.security.entity.Permission;
 import com.angio.angiobackend.api.security.entity.Role;
-import com.angio.angiobackend.api.security.entity.User;
-import com.angio.angiobackend.api.security.repository.UserRepository;
-import com.angio.angiobackend.api.security.service.UserService;
+import com.angio.angiobackend.api.user.entities.User;
+import com.angio.angiobackend.api.user.repositories.UserRepository;
+import com.angio.angiobackend.api.user.service.UserService;
 import lombok.AllArgsConstructor;
-import lombok.NonNull;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
@@ -26,13 +25,21 @@ import java.util.List;
 @Slf4j
 @AllArgsConstructor
 @Service
-public class UserDetailsServiceImpl implements UserDetailsService, UserService {
+public class UserDetailsServiceImpl implements UserDetailsService {
 
     private final UserRepository userRepository;
     private final DynamicLocaleMessageSourceAccessor msa;
 
+    /**
+     * Load user from database by username (id). In this case username which is email is not constant.
+     * Id field uses instead username because email can be changed by user.
+     *
+     * @param email user email
+     * @return user details for spring security
+     * @throws UsernameNotFoundException throws when user id not found
+     */
     @Override
-    @Transactional
+    @Transactional(readOnly = true)
     public UserDetails loadUserByUsername(String email)
             throws UsernameNotFoundException {
 
@@ -43,18 +50,10 @@ public class UserDetailsServiceImpl implements UserDetailsService, UserService {
 
         log.debug("loadUserByUsername() - end");
         return new org.springframework.security.core.userdetails.User(
-                user.getEmail(), user.getPassword(), user.isEnabled(), true, true,
+                user.getId().toString(), user.getPassword(), user.isEnabled(), true, true,
                 true, getAuthorities(user.getRoles()));
     }
 
-    @Override
-    @Transactional
-    public User findUserEntityByEmail(@NonNull String email) {
-        return userRepository.findByEmail(email)
-                .orElseThrow(() -> new UsernameNotFoundException(
-                        msa.getMessage("errors.api.user.userNotFound", new Object[] {email})));
-    }
-
     private Collection<? extends GrantedAuthority> getAuthorities(Collection<Role> roles) {
         return getGrantedAuthorities(getPermissions(roles));
     }
@@ -82,13 +81,4 @@ public class UserDetailsServiceImpl implements UserDetailsService, UserService {
         }
         return authorities;
     }
-
-    @Transactional
-    public User getUserFromContext() {
-        String email = SecurityContextHolder.getContext().getAuthentication().getName();
-        log.debug("getUserFromContext() - start username: {}", email);
-        return userRepository.findByEmail(email)
-                .orElseThrow(() -> new UnauthorizedUserException(
-                        msa.getMessage("errors.api.user.userNotFound", new Object[] {email})));
-    }
 }
\ No newline at end of file
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/impl/UserServiceImpl.java b/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/impl/UserServiceImpl.java
new file mode 100644
index 0000000..73f2a8f
--- /dev/null
+++ b/angio-backend/src/main/java/com/angio/angiobackend/api/user/service/impl/UserServiceImpl.java
@@ -0,0 +1,54 @@
+package com.angio.angiobackend.api.user.service.impl;
+
+import com.angio.angiobackend.api.common.accessor.DynamicLocaleMessageSourceAccessor;
+import com.angio.angiobackend.api.user.entities.User;
+import com.angio.angiobackend.api.user.repositories.UserRepository;
+import com.angio.angiobackend.api.user.service.UserService;
+import lombok.AllArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Slf4j
+@AllArgsConstructor
+@Service
+public class UserServiceImpl implements UserService {
+
+    private final UserRepository userRepository;
+    private final DynamicLocaleMessageSourceAccessor msa;
+
+    /**
+     * Find user by id and return entity object.
+     *
+     * @param id user id
+     * @return user entity
+     */
+    @Override
+    @Transactional(readOnly = true)
+    public User findUserEntityById(Long id) {
+        log.debug("findUserEntityById() - start id: {}", id);
+        return userRepository.findById(id)
+                .orElseThrow(() -> new UsernameNotFoundException(
+                        msa.getMessage("errors.api.user.userNotFound", new Object[] {id})));
+    }
+
+    /**
+     * Get user from security context and find it in database.
+     *
+     * @return user entity
+     */
+    @Override
+    @Transactional(readOnly = true)
+    @PreAuthorize("isAuthenticated()")
+    public User getUserFromContext() {
+        String id = SecurityContextHolder.getContext().getAuthentication().getName();
+        log.debug("getUserFromContext() - start id: {}", id);
+        return userRepository.findById(Long.valueOf(id))
+                .orElseThrow(() -> new UnauthorizedUserException(
+                        msa.getMessage("errors.api.user.userNotFound", new Object[] {id})));
+    }
+}
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/config/AuthorizationServerConfig.java b/angio-backend/src/main/java/com/angio/angiobackend/config/AuthorizationServerConfig.java
index 755c6ad..79745d2 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/config/AuthorizationServerConfig.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/config/AuthorizationServerConfig.java
@@ -4,11 +4,12 @@ import com.angio.angiobackend.api.security.AngioTokenEnhancer;
 import com.angio.angiobackend.api.security.JwtJdbcTokenStore;
 import com.angio.angiobackend.api.security.RefreshTokenFilter;
 import com.angio.angiobackend.api.security.repository.TokenRepository;
-import com.angio.angiobackend.api.security.service.UserService;
+import com.angio.angiobackend.api.user.service.UserService;
 import lombok.AllArgsConstructor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider;
 import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
 import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
 import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
@@ -66,6 +67,12 @@ public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdap
         return new AngioTokenEnhancer();
     }
 
+    AuthenticationManager
+    @Bean
+    public OAuth2UserService<OAuth2UserRequest, OAuth2User> oAuth2UserService() {
+
+    }
+
     @Bean
     public JwtAccessTokenConverter accessTokenConverter() {
         JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/config/WebMvcConfig.java b/angio-backend/src/main/java/com/angio/angiobackend/config/WebMvcConfig.java
index 4660ff1..69f758c 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/config/WebMvcConfig.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/config/WebMvcConfig.java
@@ -44,7 +44,7 @@ public class WebMvcConfig implements WebMvcConfigurer {
     @Override
     public void addCorsMappings(CorsRegistry registry) {
         registry.addMapping("/**")
-                .allowedMethods("PUT", "DELETE", "POST", "GET")
+                .allowedMethods("OPTIONS", "PUT", "DELETE", "POST", "GET")
                 .maxAge(3600);
     }
 
diff --git a/angio-backend/src/main/java/com/angio/angiobackend/config/init/InitialSecurityDataLoader.java b/angio-backend/src/main/java/com/angio/angiobackend/config/init/InitialSecurityDataLoader.java
index d5e770d..510e6af 100644
--- a/angio-backend/src/main/java/com/angio/angiobackend/config/init/InitialSecurityDataLoader.java
+++ b/angio-backend/src/main/java/com/angio/angiobackend/config/init/InitialSecurityDataLoader.java
@@ -2,10 +2,10 @@ package com.angio.angiobackend.config.init;
 
 import com.angio.angiobackend.api.security.entity.Permission;
 import com.angio.angiobackend.api.security.entity.Role;
-import com.angio.angiobackend.api.security.entity.User;
+import com.angio.angiobackend.api.user.entities.User;
 import com.angio.angiobackend.api.security.repository.PermissionRepository;
 import com.angio.angiobackend.api.security.repository.RoleRepository;
-import com.angio.angiobackend.api.security.repository.UserRepository;
+import com.angio.angiobackend.api.user.repositories.UserRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.context.ApplicationListener;
 import org.springframework.context.event.ContextRefreshedEvent;
diff --git a/angio-backend/src/main/resources/application.yml b/angio-backend/src/main/resources/application.yml
index efb3d4a..2e623ef 100644
--- a/angio-backend/src/main/resources/application.yml
+++ b/angio-backend/src/main/resources/application.yml
@@ -3,14 +3,23 @@ server:
     error:
         whitelabel:
             enabled: false
-
 spring:
     jpa:
         hibernate:
             ddl-auto: validate
             format-sql: true
+            generate_statistics: true
+            cache:
+                use-second-level-cache: true
+                region:
+                    factory-class: org.hibernate.cache.ehcache.EhCacheRegionFactory
         open-in-view: false
         show-sql: true
+        properties:
+            javax:
+                persistence:
+                    sharedcache:
+                        mode: enable_selective
 
 
     servlet:
@@ -66,7 +75,8 @@ logging:
         root: WARN
         com.angio.angiobackend: INFO
         org.springframework.web: INFO
-        org.springframework.security: INFO
+        org.springframework.security: DEBUG
+        org.hibernate.stat: DEBUG
 
 angio:
     app:
diff --git a/angio-backend/src/main/resources/db/csv/users.csv b/angio-backend/src/main/resources/db/csv/users.csv
index f93a24c..74e11b8 100644
--- a/angio-backend/src/main/resources/db/csv/users.csv
+++ b/angio-backend/src/main/resources/db/csv/users.csv
@@ -1,3 +1,3 @@
-email,password,enabled
-admin@example.com,{noop}q1w2e3,true
-doctor@example.com,{noop}q1w2e3,true
+email,password,enabled,firstname,lastname,patronymic
+admin@example.com,{noop}q1w2e3,true,Admin,Admin,Admin
+doctor@example.com,{noop}q1w2e3,true,Геннадий,Врачебный,Aдреевич
diff --git a/angio-backend/src/main/resources/db/csv/users_info.csv b/angio-backend/src/main/resources/db/csv/users_info.csv
deleted file mode 100644
index 3e55f1b..0000000
--- a/angio-backend/src/main/resources/db/csv/users_info.csv
+++ /dev/null
@@ -1,3 +0,0 @@
-user_id,firstname,lastname,patronymic
-1,Admin,Admin,Admin
-2,Геннадий,Врачебный,Aдреевич
\ No newline at end of file
diff --git a/angio-backend/src/main/resources/db/liquibase/changelogs/008_move_user_info_to_user.yml b/angio-backend/src/main/resources/db/liquibase/changelogs/008_move_user_info_to_user.yml
new file mode 100644
index 0000000..82f5e46
--- /dev/null
+++ b/angio-backend/src/main/resources/db/liquibase/changelogs/008_move_user_info_to_user.yml
@@ -0,0 +1,26 @@
+databaseChangeLog:
+- changeSet:
+    id: 008_1
+    author: nikon-petr
+    changes:
+    - addColumn:
+        tableName: users
+        columns:
+        - column:
+            name: firstname
+            type: VARCHAR(30)
+            constraints:
+                nullable: false
+        - column:
+            name: lastname
+            type: VARCHAR(30)
+            constraints:
+                nullable: false
+        - column:
+            name: patronymic
+            type: VARCHAR(30)
+            constraints:
+                nullable: false
+    - dropTable:
+        tableName: users_info
+        cascadeConstraints: true
\ No newline at end of file
diff --git a/angio-backend/src/main/resources/db/liquibase/changelogs/run-on-change/001_load_users.yml b/angio-backend/src/main/resources/db/liquibase/changelogs/run-on-change/001_load_users.yml
index 81c5160..7f084de 100644
--- a/angio-backend/src/main/resources/db/liquibase/changelogs/run-on-change/001_load_users.yml
+++ b/angio-backend/src/main/resources/db/liquibase/changelogs/run-on-change/001_load_users.yml
@@ -9,8 +9,6 @@ databaseChangeLog:
     - delete:
         tableName: tokens
     - delete:
-        tableName: users_info
-    - delete:
         tableName: users
 
     # load user data
@@ -19,8 +17,3 @@ databaseChangeLog:
         encoding: UTF-8
         file: db/csv/users.csv
         quotchar: "'"
-    - loadData:
-        tableName: users_info
-        encoding: UTF-8
-        file: db/csv/users_info.csv
-        quotchar: "'"
diff --git a/angio-backend/src/main/resources/db/liquibase/master.yml b/angio-backend/src/main/resources/db/liquibase/master.yml
index 8eb5c6d..6c0020b 100644
--- a/angio-backend/src/main/resources/db/liquibase/master.yml
+++ b/angio-backend/src/main/resources/db/liquibase/master.yml
@@ -20,7 +20,9 @@ databaseChangeLog:
 - include:
     relativeToChangelogFile: true
     file: ./changelogs/007_refactor_security.yml
-
+- include:
+    relativeToChangelogFile: true
+    file: ./changelogs/008_move_user_info_to_user.yml
 
 # always in the end of file
 - includeAll:
